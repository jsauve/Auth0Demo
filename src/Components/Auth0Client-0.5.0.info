{"Name":"Auth0 SDK","Id":1948,"Alias":"Auth0Client","Description":"[Auth0](http://auth0.com) is a cloud service that works as a Single Sign On hub between your apps and authentication sources. By adding Auth0 to your Xamarin app you can:\n\n* Add authentication with [multiple authentication sources](https://docs.auth0.com/identityproviders), either social like **Google, Facebook, Microsoft Account, LinkedIn, GitHub, Twitter, Box, 37Signals**, or enterprise identity systems like **Windows Azure AD, Google Apps, AD, ADFS or any SAML Identity Provider**.\n* Add authentication through more traditional [username/password databases](https://docs.auth0.com/mysql-connection-tutorial).\n* Add support for [linking different user accounts](https://docs.auth0.com/link-accounts) with the same user.\n* Support for generating signed [Json Web Tokens](https://docs.auth0.com/jwt) to call your APIs and **flow the user identity** securely.\n* Support for integrating with third party APIs **(AWS, Windows Azure Mobile Services, Firebase, Salesforce, and more!)**.\n* Analytics of how, when and where users are logging in.\n* Pull data from other sources and add it to the user profile, through [JavaScript rules](https://docs.auth0.com/rules).\n\nThe library is cross-platform, so once you learn it on iOS, you\u0027re all set on Android.\n\n## Authentication with Widget\n\n```csharp\nusing Auth0.SDK;\n\nvar auth0 = new Auth0Client(\n\t\"{domain}\",\n\t\"{clientID}\");\n\n// \u0027this\u0027 could be a Context object (Android) or UIViewController, UIView, UIBarButtonItem (iOS)\nvar user = await auth0.LoginAsync(this);\n/*\n- get user email =\u003e user.Profile[\"email\"].ToString()\n- get facebook/google/twitter/etc access token =\u003e user.Profile[\"identities\"][0][\"access_token\"]\n- get Windows Azure AD groups =\u003e user.Profile[\"groups\"]\n- etc.\n*/\n```\n\n* In order to request a `refresh token`, use `auth0.LoginAsync(this, withRefreshToken: true)` ([see details](https://auth0.com/docs/refresh-token)).\n* You can obtain the `{domain}` and `{clientID}` from your application\u0027s settings page on the Auth0 Dashboard. You need to subscribe to Auth0 to get these values. The sample will not work with invalid or missing parameters. You can get a free subscription for testing and evaluation.\n\n## Authentication with your own UI\n\n```csharp\nvar user = await auth0.LoginAsync(this, \"google-oauth2\"); // connection name here\n```\n\n* connection names can be found on Auth0 dashboard. E.g.: `facebook`, `linkedin`, `somegoogleapps.com`, `saml-protocol-connection`, etc.\n\n## Authentication with specific user name and password\n\n```csharp\nvar user = await auth0.LoginAsync(\n  \"sql-azure-database\", // connection name here\n  \"jdoe@foobar.com\",    // user name\n  \"1234\");             \t// password\n```\n\nGet more details on [our Xamarin tutorial](https://docs.auth0.com/xamarin-tutorial).\n\n## Delegation Token Request\n\nYou can obtain a delegation token specifying the ID of the target client (`targetClientId`) and, optionally, an `IDictionary\u003cstring, string\u003e` object (`options`) in order to include custom parameters like scope or id_token:\n\n```csharp\nvar options = new Dictionary\u003cstring, string\u003e\n{\n    { \"scope\", \"openid profile\" },      // default: openid\n};\n\nvar result = await auth0.GetDelegationToken(\n  targetClientId: \"{TARGET_CLIENT_ID}\", // defaults to: \"\"\n  idToken: \"{USER_ID_TOKEN}\", // defaults to: id_token of the authenticated user (auth0 CurrentUser.IdToken)\n  options: options);\n\n// id_token available throug result[\"id_token\"]\n```\n\n## Renew id_token if not expired\n\nIf the id_token of the logged in user has not expired ([\"exp\" claim](http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html#expDef)) you can renew it by calling:\n\n```csharp\nvar options = new Dictionary\u003cstring, string\u003e\n{\n    { \"scope\", \"openid profile\" }, // default: passthrough i.e. same as previous time token was asked for\n};\n\nauth0.RenewIdToken(options: options);\n```\n\n## Checking if the id_token has expired\n\nYou can check if the `id_token` for the current user has expired using the following code:\n\n```csharp\nbool expired = auth0.HasTokenExpired();\n```\n\nIf you want to check if a different `id_token` has expired you can use this snippet:\n```csharp\nstring idToken = // get if from somewhere...\nbool expired = TokenValidator.HasTokenExpired(idToken);\n```\n\n## Refresh id_token using refresh_token\n\nYou can obtain a `refresh_token` which **never expires** (unless explicitly revoked) and use it to renew the `id_token`.\n\nTo do that you need to first explicitly request it when logging in:\n\n```csharp\nvar user = await auth0.LoginAsync(this, withRefreshToken: true);\nvar refreshToken = user.RefreshToken;\n```\n\nYou should store that token in a safe place. The next time, instead of asking the user to log in you will be able to use the following code to get the `id_token`:\n\n```csharp\nvar refreshToken = // retrieve from safe place\nvar result = await auth0.RefreshToken(refreshToken);\n// access to result[\"id_token\"];\n```\n","Version":"0.5.0","Summary":"Add authentication with different sources, either social like Google, Facebook, Twitter, or enterprise like WAAD, Google Apps, AD, ADFS or any SAML Provider.","QuickStart":"This tutorial explains how to integrate [Auth0](http://auth0.com) with a Xamarin application (iOS or Android).  Auth0 helps you:\n\n* Add authentication with [multiple authentication sources](https://docs.auth0.com/identityproviders), either social like **Google, Facebook, Microsoft Account, LinkedIn, GitHub, Twitter, Box, 37Signals**, or enterprise identity systems like **Windows Azure AD, Google Apps, AD, ADFS or any SAML Identity Provider**.\n* Add authentication through more traditional [username/password databases](https://docs.auth0.com/mysql-connection-tutorial).\n* Add support for [linking different user accounts](https://docs.auth0.com/link-accounts) with the same user.\n* Support for generating signed [Json Web Tokens](https://docs.auth0.com/jwt) to call your APIs and **flow the user identity** securely.\n* Support for integrating with third party APIs **(AWS, Windows Azure Mobile Services, Firebase, Salesforce, and more!)**.\n* Analytics of how, when and where users are logging in.\n* Pull data from other sources and add it to the user profile, through [JavaScript rules](https://docs.auth0.com/rules).\n\nThe library is cross-platform, so once you learn it on iOS, you\u0027re all set on Android.\n\n## Create a free account in Auth0\n\n1. Go to [Auth0](http://auth0.com) and click Sign Up.\n2. Create a new Application from dashboard.\n3. Go to the Application Settings section and make sure that __Allowed Callback URLs__ has the following value: `https://{YOUR_AUTH0_DOMAIN}/mobile`\n\nThere are three options to do the integration: \n\n1. Using the [Auth0 Lock](https://docs.auth0.com/lock) widget inside a Web View (this is the simplest with only a few lines of code required).\n2. Creating your own UI (more work, but higher control the UI and overall experience).\n3. Using specific user name and password.\n\n## Option 1: Authentication using Login Widget\n\nTo start with, we\u0027d recommend using the __Auth0 Lock__ widget. Here is a snippet of code to copy \u0026 paste on your project: \n\n```csharp\nusing Auth0.SDK;\n\nvar auth0 = new Auth0Client(\n\t\"{domain}\",\n\t\"{clientID}\");\n\n// \u0027this\u0027 could be a Context object (Android) or UIViewController, UIView, UIBarButtonItem (iOS)\nvar user = await auth0.LoginAsync(this);\n/*\n- get user email =\u003e user.Profile[\"email\"].ToString()\n- get facebook/google/twitter/etc access token =\u003e user.Profile[\"identities\"][0][\"access_token\"]\n- get Windows Azure AD groups =\u003e user.Profile[\"groups\"]\n- etc.\n*/\n```\n\n* In order to request a `refresh token`, use `auth0.LoginAsync(this, withRefreshToken: true)` ([see details](https://auth0.com/docs/refresh-token)).\n* You can obtain the `{domain}` and `{clientID}` from your application\u0027s settings page on the Auth0 Dashboard. You need to subscribe to Auth0 to get these values. The sample will not work with invalid or missing parameters. You can get a free subscription for testing and evaluation at \u003chttps://auth0.com\u003e.\n* `Xamarin.Auth0Client` is built on top of the `WebRedirectAuthenticator` in the `Xamarin.Auth` component. All rules for standard authenticators apply regarding how the UI will be displayed.\n\n\n\n## Option 2: Authentication with your own UI\n\nIf you know which identity provider you want to use, you can add a `connection` parameter to the constructor and the user will be sent straight to the specified `connection`:\n\n```csharp\nvar user = await auth0.LoginAsync(this, \"google-oauth2\"); // connection name here\n```\n\n* connection names can be found on Auth0 dashboard. E.g.: `facebook`, `linkedin`, `somegoogleapps.com`, `saml-protocol-connection`, etc.\n\n## Option 3: Authentication with specific user name and password (only for providers that support this)\n\n```csharp\nvar user = await auth0.LoginAsync(\n  \"sql-azure-database\",   \t// connection name here\n  \"jdoe@foobar.com\",      \t// user name\n  \"1234\");             \t\t// password\n```\n\n* Providers supporting username/password auth are currently: Databases, Google, AD, ADFS\n\n## Accessing user information\n\nThe `Auth0User` has the following properties:\n\n* `Profile`: returns a `Newtonsoft.Json.Linq.JObject` object (from [Json.NET component](http://components.xamarin.com/view/json.net/)) containing all available user attributes (e.g.: `user.Profile[\"email\"].ToString()`).\n* `IdToken`: is a Json Web Token (JWT) containing all of the user attributes and it is signed with your client secret. This is useful to call your APIs and flow the user identity.\n* `Auth0AccessToken`: the `access_token` that can be used to access Auth0\u0027s API. You would use this for example to [link user accounts](https://docs.auth0.com/link-accounts).\n\n---\n\n## Running the samples\nSamples should run out of the box because they use DEMO keys.\n\n\u003e If you want to use your own credentials, [here](https://github.com/auth0/Xamarin.Auth0Client/blob/master/samples/README.md) is a short tutorial on how to do it.\n","Hash":"24881918bd2c5bc77a4b27a34c1ea7ed","TargetPlatforms":["ios","ios-unified","android"],"TrialHash":null}